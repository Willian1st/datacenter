<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:security="http://www.springframework.org/schema/security" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/security   
        http://www.springframework.org/schema/security/spring-security-3.2.xsd  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/data/jpa   
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">
	<!-- 扫描组件，并且不包含扫描@Controller注解 -->
	<context:component-scan base-package="com.wg.cms">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 资源外置化处理 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:system.properties</value>
			</list>
		</property>
	</bean>
	<!-- ############################cms start##################################### -->
	<!-- 系统数据源配置 -->
	<bean id="cmsDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.c3p0.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.c3p0.Url.cms}" />
		<property name="user" value="${jdbc.c3p0.username}" />
		<property name="password" value="${jdbc.c3p0.password}" />
		<property name="initialPoolSize" value="${jdbc.c3p0.initialSize}" />
		<property name="minPoolSize" value="${jdbc.c3p0.initialSize}" />
		<property name="maxPoolSize" value="${jdbc.c3p0.maxActive}" />
		<property name="acquireIncrement" value="5" />
		<property name="maxIdleTime" value="${jdbc.c3p0.maxIdle}" />
		<property name="maxStatements" value="0" />
	</bean>

	<!--生成sqlsession -->
	<bean id="cmsSqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="cmsDataSource" />
		<property name="mapperLocations" value="classpath:com/wg/cms/mapper/*.xml" />
	</bean>

	<!-- 系统数据源配置 -->
	<bean id="cmsMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wg.cms.dao" />
		<property name="sqlSessionFactoryBeanName" value="cmsSqlSession" />
	</bean>

	<bean id="cmsTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="cmsDataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="cmsTransactionManager" />
	<!-- ############################cms end##################################### -->
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->    
    <bean id="systemAuthorizingRealm" class="com.wg.cms.util.SystemAuthorizingRealm">   
        <!-- 密码加密验证方式 -->  
        <!-- <property name="credentialsMatcher">    
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">    
                <property name="hashAlgorithmName" value="MD5" />  
            </bean>    
        </property> -->    
    </bean>   
    
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->    
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->    
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->    
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">    
        <property name="realm" ref="systemAuthorizingRealm"/>    
    </bean>  
    <bean id="SpringContextUtil" class="com.wg.cms.util.SpringContextUtil" lazy-init="false" />
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/signin" />
		<!-- 登录成功后要跳转的连接 -->
		<property name="successUrl" value="/cms/goods/manage" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="/403" />

		<!-- Shiro权限过滤过滤器定义 -->
		<property name="filterChainDefinitions">
			<ref bean="shiroFilterChainDefinitions" />
		</property>
	</bean>
	<!--   
    filterChainDefinitions参数说明,注意其验证顺序是自上而下  
    =================================================================================================  
    anon        org.apache.shiro.web.filter.authc.AnonymousFilter  
    authc       org.apache.shiro.web.filter.authc.FormAuthenticationFilter  
    authcBasic  org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter  
    perms       org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter  
    port        org.apache.shiro.web.filter.authz.PortFilter  
    rest        org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter  
    roles       org.apache.shiro.web.filter.authz.RolesAuthorizationFilter  
    ssl         org.apache.shiro.web.filter.authz.SslFilter  
    user        org.apache.shiro.web.filter.authc.UserFilter  
    =================================================================================================  
    anon: 例子/admins/**=anon 没有参数，表示可以匿名使用。  
    authc: 例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数  
    roles： 例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，  
                    并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],  
                    每个参数通过才算通过，相当于hasAllRoles()方法。  
    perms： 例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，  
                    例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，  
                    想当于isPermitedAll()方法。  
    rest：  例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,  
                   其中method为post，get，delete等。  
    port：  例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,  
                   其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。  
    authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证  
    ssl:  例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https  
    user: 例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查  
    注：anon，authcBasic，auchc，user是认证过滤器，  
    perms，roles，ssl，rest，port是授权过滤器  
    =================================================================================================  
    -->   
    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">  
        <constructor-arg>  
            <value>  
                /signin=anon
				/dologin=anon
				/signout=anon
                /goods/manage/**=authc
                /goods/add/**=authc
                /goods/update/**=authc
                /setting/**=authc 
                /goods/list=anon
            </value>  
        </constructor-arg>  
    </bean>  
    
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->    
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>    
    
    <!-- AOP式方法级权限检查,开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->    
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>    
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">    
        <property name="securityManager" ref="securityManager"/>    
    </bean>    
</beans>

          
